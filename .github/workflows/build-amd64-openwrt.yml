name: Build amd64 OpenWrt

on:
  release:
    types: [published]
  push:
    branches:
      - main
    paths:
      - '*.sh'
      - 'amd64.config'
      - 'common.config'
      - '.github/workflows/*-amd64-openwrt.yml'
  schedule:
    - cron: '0 5 * * 5'

env:
  TZ: America/New_York
  REPO_URL: https://github.com/coolsnowwolf/lede
  REPO_BRANCH: master
  CONFIG_FILE: amd64.config
  PREPARE_SH: prepare.sh
  POST_INSTALL_SH: post-install.sh
  CHECK_CONFIG: true
  SSH_ACTIONS: ${{ secrets.OPENWRT_ENABLE_SSH }}
  OPENWRT_ROOT_PASSWORD: ${{ secrets.OPENWRT_ROOT_PASSWORD }}
  UPLOAD_BIN_DIR: false
  UPLOAD_FIRMWARE: true
  UPLOAD_WETRANSFER: false
  UPLOAD_RELEASE: true

jobs:
  build:
    runs-on: ubuntu-22.04

    steps:
    - name: Maximize build space
      uses: easimon/maximize-build-space@v6
      with:
        remove-dotnet: 'true'
        remove-android: 'true'
        remove-haskell: 'true'

    - name: Checkout
      uses: actions/checkout@v3

    - name: Checkout
      uses: actions/checkout@v3
      with:
        # repository: coolsnowwolf/lede
        repository: openwrt/openwrt
        path: openwrt

    - name: Initialization environment
      env:
        DEBIAN_FRONTEND: noninteractive
      run: |
        sudo -E apt update
        sudo -E apt -y install build-essential gawk gcc-multilib flex git gettext libncurses5-dev libssl-dev python3-distutils rsync unzip zlib1g-dev
        sudo timedatectl set-timezone "$TZ"

    - name: Launching prepare script
      env:
        GITHUB_REPO: ${{ github.repository }}
        GITHUB_USER: ${{ github.actor }}
      run: |
        chmod +x prepare.sh
        cd openwrt
        ../prepare.sh

    - name: Use .config file
      run: |
        [ -e amd64.config ] && cp amd64.config openwrt/.config
        cat common.config >> openwrt/.config
        cd openwrt
        make defconfig
        echo "Review .config file"
        cat .config

    - name: Check .config file
      id: check_config
      if: env.CHECK_CONFIG == 'true'
      run: |
        chmod +x check_config.sh
        ./check_config.sh common.config
        echo "::set-output name=status::success"

    - name: Download package
      id: package
      run: |
        cd openwrt
        make download -j8
        find dl -size -1024c -exec ls -l {} \;
        find dl -size -1024c -exec rm -f {} \;

    - name: Compile the firmware
      id: compile
      run: |
        cd openwrt
        echo -e "$(nproc) thread compile"
        make -j$(nproc)
        echo "::set-output name=status::success"
        grep '^CONFIG_TARGET.*DEVICE.*=y' .config | sed -r 's/CONFIG_TARGET_(.*)_DEVICE_(.*)=y/\1_\2/' > DEVICE_NAME
        [ -s DEVICE_NAME ] && echo "DEVICE_NAME=_$(cat DEVICE_NAME)" >> $GITHUB_ENV
        echo "FILE_DATE=_$(date +"%Y%m%d%H%M")" >> $GITHUB_ENV

    - name: Check space usage
      run: df -hT

    - name: Organize files
      id: organize
      run: |
        cd openwrt/bin/targets/*/*
        rm -rf packages
        ls
        rm -f openwrt-x86-64-generic-squashfs-rootfs.img.gz openwrt-x86-64-vmlinuz openwrt-x86-64-generic-kernel.bin
        echo "FIRMWARE=$PWD" >> $GITHUB_ENV
        echo "::set-output name=status::success"

    - name: Upload firmware directory
      uses: actions/upload-artifact@v3
      if: steps.organize.outputs.status == 'success' && !cancelled()
      with:
        name: OpenWrt_firmware${{ env.DEVICE_NAME }}${{ env.FILE_DATE }}
        path: ${{ env.FIRMWARE }}

    - name: Generate release tag
      id: tag
      if: steps.compile.outputs.status == 'success' && env.UPLOAD_RELEASE == 'true' && !cancelled()
      run: |
        echo "::set-output name=release_tag::$(date +"%Y.%m.%d-%H%M")"
        touch release.txt
        [ $UPLOAD_WETRANSFER = true ] && echo "ðŸ”— [WeTransfer](${{ steps.wetransfer.outputs.url }})" >> release.txt
        echo "::set-output name=status::success"

    - name: Upload firmware to release
      uses: softprops/action-gh-release@v1
      if: steps.tag.outputs.status == 'success' && !cancelled()
      env:
        GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}
      with:
        tag_name: ${{ env.RELEASE_TAG }}
        body_path: release.txt
        files: ${{ env.FIRMWARE }}/*

    # - name: Delete workflow runs
    #   uses: GitRML/delete-workflow-runs@main
    #   with:
    #     retain_days: 1
    #     keep_minimum_runs: 3

    # - name: Remove old Releases
    #   uses: dev-drprasad/delete-older-releases@v0.2.0
    #   if: steps.compile.outputs.status == 'success' && env.UPLOAD_RELEASE == 'true' && !cancelled()
    #   with:
    #     keep_latest: 3
    #     delete_tags: true
    #   env:
    #     GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}
