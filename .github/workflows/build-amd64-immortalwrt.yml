#=================================================
# https://github.com/P3TERX/Actions-OpenWrt
# Description: Build OpenWrt using GitHub Actions
# Lisence: MIT
# Author: P3TERX
# Blog: https://p3terx.com
#=================================================

name: Build amd64 immortalwrt

on:
  release:
    types: [published]
  push:
    branches:
      - master
    paths:
      - '*-immortalwrt.sh'
      - 'post-install.sh'
      - 'amd64.config'
      - 'common-immortalwrt.config'
      - '.github/workflows/*-amd64-immortalwrt.yml'
  schedule:
    - cron: '0 7 * * 5'

env:
  TZ: Asia/Shanghai
  REPO_URL: https://github.com/immortalwrt/immortalwrt
  REPO_BRANCH: master
  CONFIG_FILE: amd64.config
  PREPARE_SH: prepare-immortalwrt.sh
  POST_INSTALL_SH: post-install.sh
  CHECK_CONFIG: true
  SSH_ACTIONS: ${{ secrets.OPENWRT_ENABLE_SSH }}
  OPENWRT_ROOT_PASSWORD: ${{ secrets.OPENWRT_ROOT_PASSWORD }}
  UPLOAD_BIN_DIR: false
  UPLOAD_FIRMWARE: true
  UPLOAD_RELEASE: true

jobs:
  build:
    runs-on: ubuntu-18.04
    if: github.event.repository.owner.id == github.event.sender.id

    steps:
    - name: Checkout
      uses: actions/checkout@master

    - name: Initialization environment
      env:
        DEBIAN_FRONTEND: noninteractive
      run: |
        sudo rm -rf /etc/apt/sources.list.d/* /usr/share/dotnet /usr/local/lib/android /opt/ghc
        sudo -E apt-get -qq update
        sudo -E apt-get -qq install $(curl -fsSL raw.githubusercontent.com/CSJ1987/openwrt-list/master/depends-immortalwrt-1804)
        sudo -E apt-get -qq autoremove --purge
        sudo -E apt-get -qq clean
        sudo timedatectl set-timezone "$TZ"
        sudo mkdir -p /workdir
        sudo chown $USER:$GROUPS /workdir

    - name: Clone source code
      working-directory: /workdir
      run: |
        df -hT $PWD
        git clone --depth 1 $REPO_URL -b $REPO_BRANCH openwrt
        ln -sf /workdir/openwrt $GITHUB_WORKSPACE/openwrt

    # GitHub 将删除 7 天内未被访问的任何缓存条目
    - name: Fetch cached git commit
      uses: actions/cache@v3
      id: cache-git-commit
      with:
        path: $GITHUB_WORKSPACE/openwrt/.git-previous-commit
        key: ${{ runner.os }}-git-previous-commit

    - name: Copy current git commit to previous git commit
      if: steps.cache-git-commit.outputs.cache-hit != 'true'
      run: |
        cd $GITHUB_WORKSPACE/openwrt
        git rev-parse HEAD > .git-previous-commit

    - name: Store git commit
      uses: actions/cache@v3
      if: steps.cache-git-commit.outputs.cache-hit != 'true'
      with:
        path: $GITHUB_WORKSPACE/openwrt/.git-previous-commit
        key: ${{ runner.os }}-git-previous-commit

    - name: Launching prepare script
      env:
        GITHUB_REPO: ${{ github.repository }}
        GITHUB_USER: ${{ github.actor }}
      run: |
        cd $GITHUB_WORKSPACE/openwrt
        chmod +x $GITHUB_WORKSPACE/$PREPARE_SH
        $GITHUB_WORKSPACE/$PREPARE_SH

    - name: SSH connection to Actions
      uses: P3TERX/ssh2actions@v1.0.0
      if: (github.event.inputs.ssh == 'true' && github.event.inputs.ssh  != 'false') || contains(github.event.action, 'ssh')
      env:
        TELEGRAM_CHAT_ID: ${{ secrets.TELEGRAM_CHAT_ID }}
        TELEGRAM_BOT_TOKEN: ${{ secrets.TELEGRAM_BOT_TOKEN }}

    - name: Use .config file
      run: |
        [ -e $CONFIG_FILE ] && cp $CONFIG_FILE openwrt/.config
        cat common-immortalwrt.config >> openwrt/.config
        cd $GITHUB_WORKSPACE/openwrt
        make defconfig
        echo "Review .config file"
        cat .config

    - name: Check .config file
      id: check_config
      if: env.CHECK_CONFIG == 'true'
      run: |
        chmod +x check_config.sh
        ./check_config.sh common-immortalwrt.config
        echo "::set-output name=status::success"

    - name: Download package
      id: package
      run: |
        cd $GITHUB_WORKSPACE/openwrt
        make download -j8
        find dl -size -1024c -exec ls -l {} \;
        find dl -size -1024c -exec rm -f {} \;

    - name: Compile the firmware
      id: compile
      run: |
        cd $GITHUB_WORKSPACE/openwrt
        echo -e "$(nproc) thread compile"
        make -j$(nproc) || make -j1 || make -j1 V=s
        echo "::set-output name=status::success"
        grep '^CONFIG_TARGET.*DEVICE.*=y' .config | sed -r 's/CONFIG_TARGET_(.*)_DEVICE_(.*)=y/\1_\2/' > DEVICE_NAME
        [ -s DEVICE_NAME ] && echo "DEVICE_NAME=_$(cat DEVICE_NAME)" >> $GITHUB_ENV
        echo "FILE_DATE=_$(date +"%Y%m%d%H%M")" >> $GITHUB_ENV

    - name: Check space usage
      if: (!cancelled())
      run: df -hT

    - name: Launching post-install script
      run: |
        chmod +x $POST_INSTALL_SH
        cd $GITHUB_WORKSPACE/openwrt
        $GITHUB_WORKSPACE/$POST_INSTALL_SH

    - name: Upload bin directory
      uses: actions/upload-artifact@master
      if: steps.compile.outputs.status == 'success' && env.UPLOAD_BIN_DIR == 'true'
      with:
        name: ${{ env.FILE_DATE }}_Immortalwrt_${{ env.DEVICE_NAME }}_firmware
        path: openwrt/bin

    - name: Organize files
      id: organize
      if: steps.compile.outputs.status == 'success' && env.UPLOAD_FIRMWARE == 'true' && !cancelled()
      run: |
        cd $GITHUB_WORKSPACE/openwrt/bin/targets/*/*
        rm -rf packages
        ls
        rm -f immortalwrt-x86-64-generic-squashfs-rootfs.img.gz immortalwrt-x86-64-vmlinuz immortalwrt-x86-64-generic-kernel.bin
        echo "FIRMWARE=$PWD" >> $GITHUB_ENV
        echo "::set-output name=status::success"

    - name: Upload firmware directory
      uses: actions/upload-artifact@master
      if: steps.organize.outputs.status == 'success' && !cancelled()
      with:
        name: Immortalwrt_firmware${{ env.DEVICE_NAME }}${{ env.FILE_DATE }}
        path: ${{ env.FIRMWARE }}

    - name: Generate release tag
      id: tag
      if: steps.compile.outputs.status == 'success' && env.UPLOAD_RELEASE == 'true' && !cancelled()
      run: |
        echo "::set-output name=release_tag::$(date +"%Y.%m.%d-%H%M")"
        touch release.txt
        echo "VERSION: $RELEASE_TAG (Immortalwrt-YYYYmmdd_HHMMSS_Immortalwrt-GIT-REF)" >> release.txt
        echo "REPO: $REPO_URL ($REPO_BRANCH) branch" >> release.txt
        echo "CONFIG_FILE: $CONFIG_FILE" >> release.txt

        SHA_VALUE=$(cat openwrt/.git-previous-commit)
        if ! [[ -z "$SHA_VALUE" ]]; then
          echo "Changelogs: " >> release.txt
          git log --oneline ${SHA_VALUE}..HEAD >> release.txt
        fi

        echo "::set-output name=status::success"

    - name: Upload firmware to release
      uses: softprops/action-gh-release@v1
      if: steps.tag.outputs.status == 'success' && !cancelled()
      env:
        GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}
      with:
        tag_name: ${{ env.RELEASE_TAG }}
        body_path: release.txt
        files: ${{ env.FIRMWARE }}/*

    - name: Delete workflow runs
      uses: GitRML/delete-workflow-runs@main
      with:
        retain_days: 1
        keep_minimum_runs: 3

    - name: Remove old Releases
      uses: dev-drprasad/delete-older-releases@v0.1.0
      if: env.UPLOAD_RELEASE == 'true' && !cancelled()
      with:
        keep_latest: 3
        delete_tags: true
      env:
        GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}
